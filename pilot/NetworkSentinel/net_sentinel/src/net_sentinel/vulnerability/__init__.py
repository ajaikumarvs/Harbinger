"""
Net-Sentinel Vulnerability Module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This module provides vulnerability scanning and analysis capabilities
with support for multiple vulnerability types and assessment methods.

Basic usage:
    >>> from net_sentinel.vulnerability import VulnerabilityScanner, Severity
    >>> scanner = VulnerabilityScanner()
    >>> results = scanner.scan_target("192.168.1.100")
"""

import logging
from typing import Dict, List, Any, Optional, Union
from enum import Enum, auto
from dataclasses import dataclass, field
from datetime import datetime

logger = logging.getLogger(__name__)

class Severity(Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityType(Enum):
    """Types of vulnerabilities."""
    NETWORK = "network"
    SERVICE = "service"
    CONFIGURATION = "configuration"
    AUTHENTICATION = "authentication"
    ENCRYPTION = "encryption"
    ACCESS_CONTROL = "access_control"
    INPUT_VALIDATION = "input_validation"
    INFORMATION_DISCLOSURE = "information_disclosure"

class ExploitStatus(Enum):
    """Exploit possibility status."""
    CONFIRMED = "confirmed"
    POTENTIAL = "potential"
    UNEXPLOITABLE = "unexploitable"
    UNKNOWN = "unknown"

@dataclass
class CVSSScore:
    """CVSS score details."""
    base_score: float
    temporal_score: Optional[float] = None
    environmental_score: Optional[float] = None
    vector_string: str = ""
    version: str = "3.1"

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary format."""
        return {
            'base_score': self.base_score,
            'temporal_score': self.temporal_score,
            'environmental_score': self.environmental_score,
            'vector_string': self.vector_string,
            'version': self.version
        }

@dataclass
class Vulnerability:
    """Represents a discovered vulnerability."""
    id: str
    title: str
    description: str
    severity: Severity
    vulnerability_type: VulnerabilityType
    cvss_score: Optional[CVSSScore] = None
    cve_ids: List[str] = field(default_factory=list)
    affected_components: List[str] = field(default_factory=list)
    proof_of_concept: Optional[str] = None
    remediation: Optional[str] = None
    references: List[str] = field(default_factory=list)
    exploit_status: ExploitStatus = ExploitStatus.UNKNOWN
    discovery_time: datetime = field(default_factory=datetime.now)
    technical_details: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary format."""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity.value,
            'vulnerability_type': self.vulnerability_type.value,
            'cvss_score': self.cvss_score.to_dict() if self.cvss_score else None,
            'cve_ids': self.cve_ids,
            'affected_components': self.affected_components,
            'proof_of_concept': self.proof_of_concept,
            'remediation': self.remediation,
            'references': self.references,
            'exploit_status': self.exploit_status.value,
            'discovery_time': self.discovery_time.isoformat(),
            'technical_details': self.technical_details
        }

@dataclass
class ScanConfig:
    """Configuration for vulnerability scanning."""
    max_depth: int = 3
    timeout: float = 30.0
    concurrent_scans: int = 10
    follow_redirects: bool = True
    user_agent: str = "Net-Sentinel Security Scanner"
    scan_types: List[VulnerabilityType] = field(default_factory=lambda: list(VulnerabilityType))
    exclude_paths: List[str] = field(default_factory=list)
    authentication: Dict[str, str] = field(default_factory=dict)
    custom_headers: Dict[str, str] = field(default_factory=dict)
    proxy_settings: Optional[Dict[str, str]] = None

    def validate(self) -> bool:
        """
        Validate scan configuration.
        
        Returns:
            bool indicating if configuration is valid
            
        Raises:
            ValueError: If configuration is invalid
        """
        if self.max_depth < 1:
            raise ValueError("max_depth must be positive")
        
        if self.timeout <= 0:
            raise ValueError("timeout must be positive")
        
        if self.concurrent_scans < 1:
            raise ValueError("concurrent_scans must be positive")
        
        if not self.scan_types:
            raise ValueError("at least one scan type must be specified")
        
        return True

class VulnerabilityDatabase:
    """Interface for vulnerability information databases."""
    
    def get_cve_info(self, cve_id: str) -> Optional[Dict[str, Any]]:
        """Get CVE information."""
        raise NotImplementedError
    
    def get_exploits(self, cve_id: str) -> List[Dict[str, Any]]:
        """Get known exploits for CVE."""
        raise NotImplementedError
    
    def get_patches(self, cve_id: str) -> List[Dict[str, Any]]:
        """Get available patches for CVE."""
        raise NotImplementedError

class VulnerabilityError(Exception):
    """Base exception for vulnerability operations."""
    pass

class ScanError(VulnerabilityError):
    """Exception raised for scanning errors."""
    pass

class ValidationError(VulnerabilityError):
    """Exception raised for validation errors."""
    pass

# Import main components
from .scanner import VulnerabilityScanner
from .analyzer import VulnerabilityAnalyzer

__all__ = [
    'VulnerabilityScanner',
    'VulnerabilityAnalyzer',
    'Vulnerability',
    'ScanConfig',
    'CVSSScore',
    'Severity',
    'VulnerabilityType',
    'ExploitStatus',
    'VulnerabilityDatabase',
    'VulnerabilityError',
    'ScanError',
    'ValidationError'
]

def create_scan_config(**kwargs) -> ScanConfig:
    """
    Create scan configuration with validation.
    
    Args:
        **kwargs: Configuration parameters
        
    Returns:
        Validated ScanConfig object
        
    Raises:
        ValidationError: If configuration is invalid
    """
    try:
        config = ScanConfig(**kwargs)
        config.validate()
        return config
    except Exception as e:
        raise ValidationError(f"Invalid scan configuration: {str(e)}")

def calculate_risk_score(vulnerabilities: List[Vulnerability]) -> float:
    """
    Calculate overall risk score from vulnerabilities.
    
    Args:
        vulnerabilities: List of vulnerabilities
        
    Returns:
        Risk score between 0 and 100
    """
    if not vulnerabilities:
        return 0.0
    
    severity_weights = {
        Severity.CRITICAL: 100,
        Severity.HIGH: 75,
        Severity.MEDIUM: 50,
        Severity.LOW: 25,
        Severity.INFO: 10
    }
    
    total_weight = sum(
        severity_weights[v.severity]
        for v in vulnerabilities
    )
    
    max_possible = len(vulnerabilities) * severity_weights[Severity.CRITICAL]
    
    return (total_weight / max_possible) * 100 if max_possible > 0 else 0