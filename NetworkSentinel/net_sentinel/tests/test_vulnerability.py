"""
Tests for Net-Sentinel Vulnerability Components
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This module provides test cases for vulnerability scanning,
analysis, and classification functionality.
"""

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from datetime import datetime
import json
from pathlib import Path

from net_sentinel.vulnerability import (
    VulnerabilityScanner,
    VulnerabilityAnalyzer,
    Vulnerability,
    VulnerabilityType,
    Severity,
    ScanConfig,
    CVSSScore,
    ValidationError
)
from net_sentinel.network import Host, Service
from tests import BaseTestCase, TestConfig

class TestVulnerabilityScanner(BaseTestCase):
    """Test cases for vulnerability scanning functionality."""
    
    def setup_method(self, method):
        """Set up test method."""
        super().setup_method(method)
        self.scanner = VulnerabilityScanner()
        self.config = ScanConfig(
            max_depth=2,
            timeout=1.0,
            concurrent_scans=5
        )
    
    @pytest.mark.asyncio
    async def test_scan_target(self, mock_network_discovery):
        """Test target vulnerability scanning."""
        target = "192.168.1.100"
        
        # Setup mock responses
        mock_network_discovery.scan_host.return_value = Host(
            ip=target,
            ports=[
                {"port": 80, "service": "http", "state": "open"},
                {"port": 22, "service": "ssh", "state": "open"}
            ]
        )
        
        vulnerabilities = await self.scanner.scan_target(
            target,
            self.config
        )
        
        assert isinstance(vulnerabilities, list)
        assert all(isinstance(v, Vulnerability) for v in vulnerabilities)
        
        # Check vulnerability types
        vuln_types = [v.vulnerability_type for v in vulnerabilities]
        assert VulnerabilityType.SERVICE in vuln_types
        assert VulnerabilityType.NETWORK in vuln_types
    
    @pytest.mark.asyncio
    async def test_service_vulnerability_detection(self):
        """Test service-specific vulnerability detection."""
        host = Host(
            ip="192.168.1.100",
            ports=[
                {"port": 80, "service": "http", "state": "open"}
            ]
        )
        
        # Mock service detection
        with patch('net_sentinel.network.ServiceDetector.detect_service') as mock_detect:
            mock_detect.return_value = Service(
                port=80,
                protocol="tcp",
                service="http",
                version="2.4.29",  # Vulnerable version
                banner="Apache/2.4.29"
            )
            
            vulnerabilities = await self.scanner.scan_host(
                host,
                self.config
            )
            
            assert any(
                v for v in vulnerabilities
                if v.vulnerability_type == VulnerabilityType.SERVICE
                and "2.4.29" in v.description
            )
    
    @pytest.mark.asyncio
    async def test_concurrent_scanning(self):
        """Test concurrent vulnerability scanning."""
        targets = [f"192.168.1.{i}" for i in range(1, 6)]
        
        async def mock_scan(target):
            return [
                Vulnerability(
                    id=f"VULN-{target}-1",
                    title="Test Vulnerability",
                    description="Test Description",
                    severity=Severity.MEDIUM,
                    vulnerability_type=VulnerabilityType.NETWORK
                )
            ]
        
        with patch.object(
            VulnerabilityScanner,
            'scan_host',
            side_effect=mock_scan
        ):
            all_vulnerabilities = []
            for target in targets:
                vulns = await self.scanner.scan_target(
                    target,
                    self.config
                )
                all_vulnerabilities.extend(vulns)
            
            assert len(all_vulnerabilities) == len(targets)
    
    def test_config_validation(self):
        """Test scan configuration validation."""
        # Valid config
        config = ScanConfig(
            max_depth=3,
            timeout=30.0,
            concurrent_scans=10
        )
        assert config.validate()
        
        # Invalid depth
        with pytest.raises(ValidationError):
            ScanConfig(max_depth=0).validate()
        
        # Invalid timeout
        with pytest.raises(ValidationError):
            ScanConfig(timeout=-1.0).validate()

class TestVulnerabilityAnalyzer(BaseTestCase):
    """Test cases for vulnerability analysis functionality."""
    
    def setup_method(self, method):
        """Set up test method."""
        super().setup_method(method)
        self.analyzer = VulnerabilityAnalyzer()
    
    @pytest.mark.asyncio
    async def test_analyze_vulnerability(self, sample_vulnerability):
        """Test vulnerability analysis."""
        finding = {
            'title': sample_vulnerability['title'],
            'description': sample_vulnerability['description'],
            'severity': sample_vulnerability['severity'],
            'technical_details': sample_vulnerability['technical_details']
        }
        
        analyzed = await self.analyzer.analyze_vulnerability(finding)
        
        assert isinstance(analyzed, Vulnerability)
        assert analyzed.title == finding['title']
        assert analyzed.severity == Severity(finding['severity'])
        assert analyzed.id.startswith("VULN-")
    
    @pytest.mark.asyncio
    async def test_cvss_calculation(self):
        """Test CVSS score calculation."""
        finding = {
            'title': 'SQL Injection',
            'description': 'SQL injection vulnerability',
            'cvss_vector': 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
        }
        
        analyzed = await self.analyzer.analyze_vulnerability(finding)
        
        assert isinstance(analyzed.cvss_score, CVSSScore)
        assert analyzed.cvss_score.base_score == 9.8
        assert analyzed.severity == Severity.CRITICAL
    
    def test_analyze_dependencies(self):
        """Test vulnerability dependency analysis."""
        vulnerabilities = [
            Vulnerability(
                id="VULN-1",
                title="Auth Bypass",
                description="Authentication bypass vulnerability",
                severity=Severity.CRITICAL,
                vulnerability_type=VulnerabilityType.AUTHENTICATION,
                affected_components=["auth_service"]
            ),
            Vulnerability(
                id="VULN-2",
                title="Data Exposure",
                description="Sensitive data exposure",
                severity=Severity.HIGH,
                vulnerability_type=VulnerabilityType.INFORMATION_DISCLOSURE,
                affected_components=["auth_service", "data_service"]
            )
        ]
        
        dependencies = self.analyzer.analyze_dependencies(vulnerabilities)
        
        assert isinstance(dependencies, dict)
        assert "VULN-1" in dependencies
        assert "VULN-2" in dependencies[0]  # Auth bypass enables data exposure
    
    @pytest.mark.asyncio
    async def test_enrich_vulnerabilities(self):
        """Test vulnerability enrichment."""
        vulnerabilities = [
            Vulnerability(
                id="VULN-1",
                title="CVE-2024-1234 Exploit",
                description="Known vulnerability",
                severity=Severity.HIGH,
                vulnerability_type=VulnerabilityType.SERVICE,
                cve_ids=["CVE-2024-1234"]
            )
        ]
        
        # Mock CVE details fetching
        with patch('aiohttp.ClientSession.get') as mock_get:
            mock_get.return_value.__aenter__.return_value.status = 200
            mock_get.return_value.__aenter__.return_value.json = AsyncMock(
                return_value={
                    'description': 'Detailed CVE description',
                    'references': ['https://example.com/cve']
                }
            )
            
            enriched = await self.analyzer.enrich_vulnerabilities(
                vulnerabilities
            )
            
            assert len(enriched) == 1
            assert 'cve_details' in enriched[0].technical_details

@pytest.fixture
def sample_vulnerability():
    """Provide sample vulnerability data."""
    return {
        'title': 'Critical Service Exposed',
        'severity': 'critical',
        'description': 'A critical service is exposed to the network',
        'technical_details': {
            'service': 'database',
            'port': 5432,
            'version': '9.6.3'
        }
    }

@pytest.fixture
def mock_network_discovery():
    """Provide mock network discovery."""
    mock = Mock()
    mock.scan_host.return_value = Host(
        ip="192.168.1.100",
        ports=[
            {"port": 80, "service": "http", "state": "open"}
        ]
    )
    return mock

@pytest.fixture
def mock_cve_database():
    """Provide mock CVE database."""
    return {
        'CVE-2024-1234': {
            'description': 'Test vulnerability',
            'cvss_score': 7.5,
            'references': ['https://example.com/cve']
        }
    }